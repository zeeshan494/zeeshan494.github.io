// Auto-generated blog data
window.blogData = {
  "posts": [
    {
      "id": "post_1749846610399_rjxyix4v6",
      "title": "The Anatomy of Email Threats: What SOC Analysts Need to Know",
      "category": "threat-hunting",
      "excerpt": "Email threats are one of the most frequent challenges faced by Security Operations Center (SOC) analysts. These threats often crop up multiple times in a single shift, keeping teams on high alert.",
      "tags": [
        "Security",
        "Phishing",
        "Email Security",
        "Soc Analyst",
        "Cyber Threats",
        "Threat Detection"
      ],
      "content": "<p>Email threats are one of the most frequent challenges faced by Security Operations Center (SOC) analysts. These threats often crop up multiple times in a single shift, keeping teams on high alert.</p><p>For attackers, malicious emails are often the starting point for infiltrating a target environment. With these threats on the rise, it’s crucial for SOC analysts and cyber investigators to grasp the techniques attackers use to exploit emails — and, just as importantly, how to detect and respond effectively.</p><p>In this blog, we’ll dive into:</p><ul><li>Why phishing emails are a favorite tool for attackers.</li><li>The most common email-based threats.</li><li>Clever techniques attackers use to evade detection</li><li>Social engineering techniques to trick victims.</li></ul><p>Lets discuss in detail these points</p><h1><strong>Why phishing emails are a favorite tool for attackers.</strong></h1><p>Phishing emails are a top choice for attackers because they’re simple, effective, and exploit human behavior. Here’s why they work so well:</p><p><br></p><ol><li><strong>Easy to Find Email Addresses</strong></li><li>Attackers can quickly gather target emails from job postings, LinkedIn, data leaks, or marketing platforms like ZoomInfo. This makes delivering malicious content to victims easy.</li><li><strong>Simple to Create Malicious Content</strong></li><li>Weaponizing a link or file is straightforward. Attackers can upload malware to cloud platforms, embed it in documents, or send it as compressed files — all through email.</li><li><strong>Users Lack Awareness</strong></li><li>Many people aren’t trained to spot phishing emails, making it easier for attackers to trick them into clicking links or sharing sensitive information.</li></ol><p>These factors make phishing one of the easiest and most effective ways for attackers to gain access.</p><h1>The most common email-based threats.</h1><p>Email threats aren’t limited to phishing scams. Attackers also use email for blackmail, data leaks, exfiltration, and even lateral movement within an organization. Let’s explore four of the most common email threats:</p><h2>1. Spear phishing Attachments</h2><p>Spear phishing attachments involve attackers sending malicious files to target victims. The goal is often to gain access to their systems or steal credentials. After gathering email addresses and preparing the harmful attachment, the attacker simply sends the email with a click.</p><p><br></p><p>But what kind of attachments do attackers typically use? Let’s dive into the most common types of weaponized attachments.</p><p>Attackers use various types of weaponized attachments in spear phishing emails, tailored to their goals and the victim’s environment. Here are the five most common phishing attachment types:</p><ul><li><strong>Malicious Microsoft Office Documents</strong>: Attackers often weaponize Excel, Word, or PowerPoint documents with VBA macros to trick victims into opening them. These are popular because most businesses use Microsoft Office, making the attachments appear legitimate.</li><li><strong>Malicious PDF Files</strong>: Attackers embed malicious code in PDF files, exploiting vulnerabilities in PDF readers. PDFs are appealing because they can contain JavaScript and other elements that make the file look authentic, increasing the chances of the victim interacting with it.</li><li><strong>Compressed Files (.rar, .7z, .zip, etc.)</strong>: Attackers may send compressed files containing executable malware, tricking victims into extracting and running the malicious program.</li><li><strong>ISO Images</strong>: ISO files are becoming more common as they can bypass file filters and evade antivirus detection, making them an effective tool for delivering malware.</li><li><strong>HTML Files</strong>: Attackers may send HTML files that impersonate familiar login pages (like Microsoft, DHL, or bank logins) to steal victims’ credentials.</li></ul><h2>2. Spear phishing Links</h2><p>Spear phishing links are another method attackers use to gain access to systems by tricking victims into clicking on malicious links. These links often lead to fake websites or malware downloads. Let’s look at the two main types of phishing links attackers commonly use:</p><p><br></p><ul><li><strong><em>Phishing Links to Harvest Credentials</em></strong>: Attackers send emails with links to fake websites designed to steal login details. These fake pages may look like legitimate login screens for services like email or banking. The attacker might host the phishing page on their own domain or exploit legitimate cloud platforms like appspot.com.</li><li><strong><em>Phishing Links to Download Malware</em>:&nbsp;</strong>In this case, attackers use links to malicious files hosted on their own servers or trusted cloud services like MEGA, OneDrive, or Dropbox. When victims click the link, they are tricked into downloading and running the malware on their systems.</li></ul><h2>3. Blackmail Email</h2><p>A...",
      "status": "published",
      "image": "",
      "date": "2025-06-13T20:30:10.399Z",
      "lastModified": "2025-06-13T20:30:10.399Z",
      "views": 0,
      "likes": 0,
      "comments": []
    },
    {
      "id": "post_1749846369589_ceydg41bu",
      "title": "Controlling app access on a specific SharePoint site collections",
      "category": "cloud-security",
      "excerpt": "Learn how to properly configure SharePoint app permissions when dealing with expired secrets and the Sites.Selected permission to ensure full access to specific SharePoint sites.",
      "tags": [
        "Microsoft",
        "SharePoint",
        "Site",
        "Azure",
        "Permissions"
      ],
      "content": "<p>Imagine facing a significant challenge when your automation processes suddenly fail due to expired SharePoint secrets, interrupting access to a key SharePoint site and bringing operations to a halt. After reaching out to the IT team, they promptly replaced the outdated app in Azure Apps with a new one, generating fresh credentials —<em>&nbsp;tenant ID, secrets, and Application (Client) ID</em>. These credentials are vital for our automation workflows, enabling access to the SharePoint platform, including specific sites.</p><p>However, a new challenge arose when the IT team assigned the “<strong>Sites.Selected</strong>” permission under Microsoft Graph Sites. By default, this permission does not grant access to any SharePoint site collections unless explicitly configured. With only the “Sites.Selected” permission assigned, the application was denied access to the necessary SharePoint sites.</p><p>To ensure access to specific sites within SharePoint, explicit permissions need to be defined for each site. Both the IT team and your team need to collaborate and follow specific steps when setting up permissions for newly created applications.</p><p>In this post, I’ll outline these collaborative steps to help ensure full access to SharePoint sites moving forward.</p><p><strong>Steps:</strong></p><p><strong>1. Azure App Setup (Initial Configuration)</strong></p><ul><li><strong>Azure App Creation:</strong>&nbsp;The IT team creates the app in Azure AD and shares App name, App(Client ID), Tenant ID and Secrets with you.</li><li><strong>Permission Assignment:</strong>&nbsp;The app is assigned the “<strong>Sites.Selected</strong>” permission. This does not automatically grant access to any SharePoint site but enables specific access to be configured later via the Microsoft Graph API.</li></ul><p><br></p><p><img src=\"https://miro.medium.com/v2/resize:fit:700/1*M_6i9inSQ3vsO08pVFn-tQ.png\" height=\"500\" width=\"700\"></p><p>Microsoft Graph Sites</p><p><strong>2. App Attempts to Access SharePoint Site</strong></p><ul><li><strong>App Request:</strong>&nbsp;The app attempts to access a SharePoint site collection (e.g., to read/write data).</li><li><strong>Initial Denial:</strong>&nbsp;Since the app has only the “Sites.Selected” permission, access is denied to any SharePoint site&nbsp;<strong>unless permissions are explicitly granted</strong>.</li></ul><p><strong>3. Admin Grants Site Permissions (via Microsoft Graph API)</strong></p><ul><li>You’ve to make and share an API with IT team which SharePoint admin will call to provide access to a specific site(<strong>MSSP</strong>) with in the SharePoint.</li><li><strong>API Call (POST /permissions):</strong>&nbsp;Following API will be called on Graph explorer by SharePoint admin:</li></ul><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">Method: POST API: https://graph.microsoft.com/v1.0/sites/site_id_comes_here/permissions Request Body: { \"roles\": [ \"read\", \"write\" ], \"grantedToIdentities\": [ { \"application\": { \"id\": \"application_id_comes_here\", \"displayName\": \"application_name_comes_here\" } } ] } </pre><p><img src=\"https://miro.medium.com/v2/resize:fit:700/1*xi0hFLtQBtgecJZBccR_sQ.png\" height=\"215\" width=\"700\"></p><p>Graph Explorer</p><p>Replace Application ID and display name with the new App data shared by IT team. Get Site ID from IT team if it is handled by IT team, if it is handled by you team you can get it easily by making following API call on Graph Explorer.</p><p><em>GET&nbsp;</em><a href=\"https://graph.microsoft.com/v1.0/sites?search=\" target=\"_blank\" style=\"color: inherit;\"><em>https://graph.microsoft.com/v1.0/sites?search=</em></a><em>your_site_name.</em></p><p><img src=\"https://miro.medium.com/v2/resize:fit:700/1*hEujvDpr5IEL1-MLKI1spw.png\" height=\"240\" width=\"700\"></p><p>Graph Explorer</p><ul><li><strong>Roles &amp; Permissions:</strong>&nbsp;The request grants specific roles (e.g., “read” or “write”) for the SharePoint site, defining what actions the app can perform.</li></ul><p><br></p><p><strong>4. App Receives Access</strong></p><ul><li><strong>Access Granted:</strong>&nbsp;Once the API call is successful, the app receives the necessary permissions (e.g write, read) for the specified SharePoint site.</li></ul><p><br></p><p><img src=\"https://miro.medium.com/v2/resize:fit:700/1*6trWMRvGF9e68nRD_vl8lg.png\" height=\"451\" width=\"700\"></p><p>Site access workflow</p><p>This setup will surely give you required access, you can ask if any assistance is required.</p><p>Reference:&nbsp;<a href=\"https://devblogs.microsoft.com/microsoft365dev/controlling-app-access-on-specific-sharepoint-site-collections/\" target=\"_blank\" style=\"color: inherit;\">Microsoft Documentation</a></p>",
      "status": "published",
      "image": "",
      "date": "2025-06-13T20:26:09.589Z",
      "lastModified": "2025-06-13T20:26:09.589Z",
      "views": 0,
      "likes": 0,
      "comments": []
    }
  ],
  "categories": {
    "threat-hunting": 1,
    "cloud-security": 1
  },
  "lastUpdated": "2025-06-13T20:30:12.347Z"
};